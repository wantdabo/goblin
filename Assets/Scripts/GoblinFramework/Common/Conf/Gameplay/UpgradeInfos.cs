//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Conf.Gameplay
{
   
public partial class UpgradeInfos
{
    private readonly Dictionary<int, Conf.Gameplay.UpgradeInfo> _dataMap;
    private readonly List<Conf.Gameplay.UpgradeInfo> _dataList;
    
    public UpgradeInfos(ByteBuf _buf)
    {
        _dataMap = new Dictionary<int, Conf.Gameplay.UpgradeInfo>();
        _dataList = new List<Conf.Gameplay.UpgradeInfo>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            Conf.Gameplay.UpgradeInfo _v;
            _v = Conf.Gameplay.UpgradeInfo.DeserializeUpgradeInfo(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
        PostInit();
    }

    public Dictionary<int, Conf.Gameplay.UpgradeInfo> DataMap => _dataMap;
    public List<Conf.Gameplay.UpgradeInfo> DataList => _dataList;

    public Conf.Gameplay.UpgradeInfo GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public Conf.Gameplay.UpgradeInfo Get(int key) => _dataMap[key];
    public Conf.Gameplay.UpgradeInfo this[int key] => _dataMap[key];

    public void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var v in _dataList)
        {
            v.Resolve(_tables);
        }
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var v in _dataList)
        {
            v.TranslateText(translator);
        }
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}