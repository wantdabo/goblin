// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(43)
            {
                { typeof(global::Queen.Protocols.FrameInfo[]), 0 },
                { typeof(global::Queen.Protocols.RoomInfo[]), 1 },
                { typeof(global::Queen.Protocols.RoomMemberInfo[]), 2 },
                { typeof(global::Queen.Protocols.SeatInfo[]), 3 },
                { typeof(global::Queen.Protocols.SeatInputInfo[]), 4 },
                { typeof(global::Queen.Protocols.C2G_SetInputMsg), 5 },
                { typeof(global::Queen.Protocols.C2G_StartStageMsg), 6 },
                { typeof(global::Queen.Protocols.C2S_CreateRoomMsg), 7 },
                { typeof(global::Queen.Protocols.C2S_DestroyRoomMsg), 8 },
                { typeof(global::Queen.Protocols.C2S_ExitRoomMsg), 9 },
                { typeof(global::Queen.Protocols.C2S_JoinRoomMsg), 10 },
                { typeof(global::Queen.Protocols.C2S_KickRoomMsg), 11 },
                { typeof(global::Queen.Protocols.C2S_PullRoomsMsg), 12 },
                { typeof(global::Queen.Protocols.C2S_Room2GameMsg), 13 },
                { typeof(global::Queen.Protocols.C2SLoginMsg), 14 },
                { typeof(global::Queen.Protocols.C2SLogoutMsg), 15 },
                { typeof(global::Queen.Protocols.C2SRegisterMsg), 16 },
                { typeof(global::Queen.Protocols.Common.NodeConnectMsg), 17 },
                { typeof(global::Queen.Protocols.Common.NodeDisconnectMsg), 18 },
                { typeof(global::Queen.Protocols.Common.NodePingMsg), 19 },
                { typeof(global::Queen.Protocols.Common.NodeReceiveMsg), 20 },
                { typeof(global::Queen.Protocols.Common.NodeTimeoutMsg), 21 },
                { typeof(global::Queen.Protocols.FrameInfo), 22 },
                { typeof(global::Queen.Protocols.G2C_LogicTickMsg), 23 },
                { typeof(global::Queen.Protocols.G2C_StartStageMsg), 24 },
                { typeof(global::Queen.Protocols.G2S_CreateStageMsg), 25 },
                { typeof(global::Queen.Protocols.RoomInfo), 26 },
                { typeof(global::Queen.Protocols.RoomMemberInfo), 27 },
                { typeof(global::Queen.Protocols.S2C_CreateRoomMsg), 28 },
                { typeof(global::Queen.Protocols.S2C_DestroyRoomMsg), 29 },
                { typeof(global::Queen.Protocols.S2C_ExitRoomMsg), 30 },
                { typeof(global::Queen.Protocols.S2C_GameInfoMsg), 31 },
                { typeof(global::Queen.Protocols.S2C_JoinRoomMsg), 32 },
                { typeof(global::Queen.Protocols.S2C_KickRoomMsg), 33 },
                { typeof(global::Queen.Protocols.S2C_PushRoomMsg), 34 },
                { typeof(global::Queen.Protocols.S2C_PushRoomsMsg), 35 },
                { typeof(global::Queen.Protocols.S2C_Room2GameMsg), 36 },
                { typeof(global::Queen.Protocols.S2CLoginMsg), 37 },
                { typeof(global::Queen.Protocols.S2CLogoutMsg), 38 },
                { typeof(global::Queen.Protocols.S2CRegisterMsg), 39 },
                { typeof(global::Queen.Protocols.S2G_CreateStageMsg), 40 },
                { typeof(global::Queen.Protocols.SeatInfo), 41 },
                { typeof(global::Queen.Protocols.SeatInputInfo), 42 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Queen.Protocols.FrameInfo>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Queen.Protocols.RoomInfo>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Queen.Protocols.RoomMemberInfo>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::Queen.Protocols.SeatInfo>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<global::Queen.Protocols.SeatInputInfo>();
                case 5: return new MessagePack.Formatters.Queen.Protocols.C2G_SetInputMsgFormatter();
                case 6: return new MessagePack.Formatters.Queen.Protocols.C2G_StartStageMsgFormatter();
                case 7: return new MessagePack.Formatters.Queen.Protocols.C2S_CreateRoomMsgFormatter();
                case 8: return new MessagePack.Formatters.Queen.Protocols.C2S_DestroyRoomMsgFormatter();
                case 9: return new MessagePack.Formatters.Queen.Protocols.C2S_ExitRoomMsgFormatter();
                case 10: return new MessagePack.Formatters.Queen.Protocols.C2S_JoinRoomMsgFormatter();
                case 11: return new MessagePack.Formatters.Queen.Protocols.C2S_KickRoomMsgFormatter();
                case 12: return new MessagePack.Formatters.Queen.Protocols.C2S_PullRoomsMsgFormatter();
                case 13: return new MessagePack.Formatters.Queen.Protocols.C2S_Room2GameMsgFormatter();
                case 14: return new MessagePack.Formatters.Queen.Protocols.C2SLoginMsgFormatter();
                case 15: return new MessagePack.Formatters.Queen.Protocols.C2SLogoutMsgFormatter();
                case 16: return new MessagePack.Formatters.Queen.Protocols.C2SRegisterMsgFormatter();
                case 17: return new MessagePack.Formatters.Queen.Protocols.Common.NodeConnectMsgFormatter();
                case 18: return new MessagePack.Formatters.Queen.Protocols.Common.NodeDisconnectMsgFormatter();
                case 19: return new MessagePack.Formatters.Queen.Protocols.Common.NodePingMsgFormatter();
                case 20: return new MessagePack.Formatters.Queen.Protocols.Common.NodeReceiveMsgFormatter();
                case 21: return new MessagePack.Formatters.Queen.Protocols.Common.NodeTimeoutMsgFormatter();
                case 22: return new MessagePack.Formatters.Queen.Protocols.FrameInfoFormatter();
                case 23: return new MessagePack.Formatters.Queen.Protocols.G2C_LogicTickMsgFormatter();
                case 24: return new MessagePack.Formatters.Queen.Protocols.G2C_StartStageMsgFormatter();
                case 25: return new MessagePack.Formatters.Queen.Protocols.G2S_CreateStageMsgFormatter();
                case 26: return new MessagePack.Formatters.Queen.Protocols.RoomInfoFormatter();
                case 27: return new MessagePack.Formatters.Queen.Protocols.RoomMemberInfoFormatter();
                case 28: return new MessagePack.Formatters.Queen.Protocols.S2C_CreateRoomMsgFormatter();
                case 29: return new MessagePack.Formatters.Queen.Protocols.S2C_DestroyRoomMsgFormatter();
                case 30: return new MessagePack.Formatters.Queen.Protocols.S2C_ExitRoomMsgFormatter();
                case 31: return new MessagePack.Formatters.Queen.Protocols.S2C_GameInfoMsgFormatter();
                case 32: return new MessagePack.Formatters.Queen.Protocols.S2C_JoinRoomMsgFormatter();
                case 33: return new MessagePack.Formatters.Queen.Protocols.S2C_KickRoomMsgFormatter();
                case 34: return new MessagePack.Formatters.Queen.Protocols.S2C_PushRoomMsgFormatter();
                case 35: return new MessagePack.Formatters.Queen.Protocols.S2C_PushRoomsMsgFormatter();
                case 36: return new MessagePack.Formatters.Queen.Protocols.S2C_Room2GameMsgFormatter();
                case 37: return new MessagePack.Formatters.Queen.Protocols.S2CLoginMsgFormatter();
                case 38: return new MessagePack.Formatters.Queen.Protocols.S2CLogoutMsgFormatter();
                case 39: return new MessagePack.Formatters.Queen.Protocols.S2CRegisterMsgFormatter();
                case 40: return new MessagePack.Formatters.Queen.Protocols.S2G_CreateStageMsgFormatter();
                case 41: return new MessagePack.Formatters.Queen.Protocols.SeatInfoFormatter();
                case 42: return new MessagePack.Formatters.Queen.Protocols.SeatInputInfoFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Queen.Protocols
{
    public sealed class C2G_SetInputMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2G_SetInputMsg>
    {
        // inputInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_inputInfo() => new byte[1 + 9] { 169, 105, 110, 112, 117, 116, 73, 110, 102, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2G_SetInputMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_inputInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInputInfo>(formatterResolver).Serialize(ref writer, value.inputInfo, options);
        }

        public global::Queen.Protocols.C2G_SetInputMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2G_SetInputMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_inputInfo().Slice(1))) { goto FAIL; }

                        ____result.inputInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInputInfo>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2G_StartStageMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2G_StartStageMsg>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // seat
        private static global::System.ReadOnlySpan<byte> GetSpan_seat() => new byte[1 + 4] { 164, 115, 101, 97, 116 };
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2G_StartStageMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_seat());
            writer.Write(value.seat);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Protocols.C2G_StartStageMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2G_StartStageMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1952540019UL) { goto FAIL; }

                        ____result.seat = reader.ReadUInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237970109966541168UL) { goto FAIL; }

                        ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2S_CreateRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_CreateRoomMsg>
    {
        // name
        private static global::System.ReadOnlySpan<byte> GetSpan_name() => new byte[1 + 4] { 164, 110, 97, 109, 101 };
        // needpwd
        private static global::System.ReadOnlySpan<byte> GetSpan_needpwd() => new byte[1 + 7] { 167, 110, 101, 101, 100, 112, 119, 100 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };
        // mlimit
        private static global::System.ReadOnlySpan<byte> GetSpan_mlimit() => new byte[1 + 6] { 166, 109, 108, 105, 109, 105, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_CreateRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.name, options);
            writer.WriteRaw(GetSpan_needpwd());
            writer.Write(value.needpwd);
            writer.WriteRaw(GetSpan_password());
            writer.Write(value.password);
            writer.WriteRaw(GetSpan_mlimit());
            writer.Write(value.mlimit);
        }

        public global::Queen.Protocols.C2S_CreateRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2S_CreateRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667182UL) { goto FAIL; }

                        ____result.name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28278822275474798UL) { goto FAIL; }

                        ____result.needpwd = reader.ReadBoolean();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237970109966541168UL) { goto FAIL; }

                        ____result.password = reader.ReadUInt32();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127996156013677UL) { goto FAIL; }

                        ____result.mlimit = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2S_DestroyRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_DestroyRoomMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_DestroyRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.C2S_DestroyRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.C2S_DestroyRoomMsg();
            return ____result;
        }
    }

    public sealed class C2S_ExitRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_ExitRoomMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_ExitRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.C2S_ExitRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.C2S_ExitRoomMsg();
            return ____result;
        }
    }

    public sealed class C2S_JoinRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_JoinRoomMsg>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_JoinRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_password());
            writer.Write(value.password);
        }

        public global::Queen.Protocols.C2S_JoinRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2S_JoinRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237970109966541168UL) { goto FAIL; }

                        ____result.password = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2S_KickRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_KickRoomMsg>
    {
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_KickRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
        }

        public global::Queen.Protocols.C2S_KickRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2S_KickRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2S_PullRoomsMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_PullRoomsMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_PullRoomsMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.C2S_PullRoomsMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.C2S_PullRoomsMsg();
            return ____result;
        }
    }

    public sealed class C2S_Room2GameMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2S_Room2GameMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2S_Room2GameMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.C2S_Room2GameMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.C2S_Room2GameMsg();
            return ____result;
        }
    }

    public sealed class C2SLoginMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2SLoginMsg>
    {
        // username
        private static global::System.ReadOnlySpan<byte> GetSpan_username() => new byte[1 + 8] { 168, 117, 115, 101, 114, 110, 97, 109, 101 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2SLoginMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.username, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Protocols.C2SLoginMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2SLoginMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731189UL:
                                ____result.username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541168UL:
                                ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2SLogoutMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2SLogoutMsg>
    {
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2SLogoutMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
        }

        public global::Queen.Protocols.C2SLogoutMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2SLogoutMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2SRegisterMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.C2SRegisterMsg>
    {
        // username
        private static global::System.ReadOnlySpan<byte> GetSpan_username() => new byte[1 + 8] { 168, 117, 115, 101, 114, 110, 97, 109, 101 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.C2SRegisterMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.username, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Protocols.C2SRegisterMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.C2SRegisterMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731189UL:
                                ____result.username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541168UL:
                                ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FrameInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.FrameInfo>
    {
        // frame
        private static global::System.ReadOnlySpan<byte> GetSpan_frame() => new byte[1 + 5] { 165, 102, 114, 97, 109, 101 };
        // seatInputInfos
        private static global::System.ReadOnlySpan<byte> GetSpan_seatInputInfos() => new byte[1 + 14] { 174, 115, 101, 97, 116, 73, 110, 112, 117, 116, 73, 110, 102, 111, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.FrameInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_frame());
            writer.Write(value.frame);
            writer.WriteRaw(GetSpan_seatInputInfos());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInputInfo[]>(formatterResolver).Serialize(ref writer, value.seatInputInfos, options);
        }

        public global::Queen.Protocols.FrameInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.FrameInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435626799718UL) { goto FAIL; }

                        ____result.frame = reader.ReadUInt32();
                        continue;
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_seatInputInfos().Slice(1))) { goto FAIL; }

                        ____result.seatInputInfos = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInputInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class G2C_LogicTickMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.G2C_LogicTickMsg>
    {
        // frame
        private static global::System.ReadOnlySpan<byte> GetSpan_frame() => new byte[1 + 5] { 165, 102, 114, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.G2C_LogicTickMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_frame());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.FrameInfo>(formatterResolver).Serialize(ref writer, value.frame, options);
        }

        public global::Queen.Protocols.G2C_LogicTickMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.G2C_LogicTickMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435626799718UL) { goto FAIL; }

                        ____result.frame = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.FrameInfo>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class G2C_StartStageMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.G2C_StartStageMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // frames
        private static global::System.ReadOnlySpan<byte> GetSpan_frames() => new byte[1 + 6] { 166, 102, 114, 97, 109, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.G2C_StartStageMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_frames());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.FrameInfo[]>(formatterResolver).Serialize(ref writer, value.frames, options);
        }

        public global::Queen.Protocols.G2C_StartStageMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.G2C_StartStageMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879463993958UL) { goto FAIL; }

                        ____result.frames = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.FrameInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class G2S_CreateStageMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.G2S_CreateStageMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.G2S_CreateStageMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
        }

        public global::Queen.Protocols.G2S_CreateStageMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.G2S_CreateStageMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.RoomInfo>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // state
        private static global::System.ReadOnlySpan<byte> GetSpan_state() => new byte[1 + 5] { 165, 115, 116, 97, 116, 101 };
        // owner
        private static global::System.ReadOnlySpan<byte> GetSpan_owner() => new byte[1 + 5] { 165, 111, 119, 110, 101, 114 };
        // name
        private static global::System.ReadOnlySpan<byte> GetSpan_name() => new byte[1 + 4] { 164, 110, 97, 109, 101 };
        // needpwd
        private static global::System.ReadOnlySpan<byte> GetSpan_needpwd() => new byte[1 + 7] { 167, 110, 101, 101, 100, 112, 119, 100 };
        // mlimit
        private static global::System.ReadOnlySpan<byte> GetSpan_mlimit() => new byte[1 + 6] { 166, 109, 108, 105, 109, 105, 116 };
        // members
        private static global::System.ReadOnlySpan<byte> GetSpan_members() => new byte[1 + 7] { 167, 109, 101, 109, 98, 101, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.RoomInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_state());
            writer.Write(value.state);
            writer.WriteRaw(GetSpan_owner());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.owner, options);
            writer.WriteRaw(GetSpan_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.name, options);
            writer.WriteRaw(GetSpan_needpwd());
            writer.Write(value.needpwd);
            writer.WriteRaw(GetSpan_mlimit());
            writer.Write(value.mlimit);
            writer.WriteRaw(GetSpan_members());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomMemberInfo[]>(formatterResolver).Serialize(ref writer, value.members, options);
        }

        public global::Queen.Protocols.RoomInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.RoomInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435744240755UL:
                                ____result.state = reader.ReadInt32();
                                continue;
                            case 491328010095UL:
                                ____result.owner = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667182UL) { goto FAIL; }

                        ____result.name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28278822275474798UL:
                                ____result.needpwd = reader.ReadBoolean();
                                continue;
                            case 32495402090325357UL:
                                ____result.members = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomMemberInfo[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 127996156013677UL) { goto FAIL; }

                        ____result.mlimit = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomMemberInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.RoomMemberInfo>
    {
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };
        // nickname
        private static global::System.ReadOnlySpan<byte> GetSpan_nickname() => new byte[1 + 8] { 168, 110, 105, 99, 107, 110, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.RoomMemberInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
            writer.WriteRaw(GetSpan_nickname());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.nickname, options);
        }

        public global::Queen.Protocols.RoomMemberInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.RoomMemberInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604897168157038UL) { goto FAIL; }

                        ____result.nickname = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_CreateRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_CreateRoomMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_CreateRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
        }

        public global::Queen.Protocols.S2C_CreateRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_CreateRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_DestroyRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_DestroyRoomMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_DestroyRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
        }

        public global::Queen.Protocols.S2C_DestroyRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_DestroyRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_ExitRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_ExitRoomMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_ExitRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Protocols.S2C_ExitRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_ExitRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_GameInfoMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_GameInfoMsg>
    {
        // host
        private static global::System.ReadOnlySpan<byte> GetSpan_host() => new byte[1 + 4] { 164, 104, 111, 115, 116 };
        // port
        private static global::System.ReadOnlySpan<byte> GetSpan_port() => new byte[1 + 4] { 164, 112, 111, 114, 116 };
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // seat
        private static global::System.ReadOnlySpan<byte> GetSpan_seat() => new byte[1 + 4] { 164, 115, 101, 97, 116 };
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_GameInfoMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_host());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.host, options);
            writer.WriteRaw(GetSpan_port());
            writer.Write(value.port);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_seat());
            writer.Write(value.seat);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Protocols.S2C_GameInfoMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_GameInfoMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1953722216UL:
                                ____result.host = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953656688UL:
                                ____result.port = reader.ReadUInt32();
                                continue;
                            case 1952540019UL:
                                ____result.seat = reader.ReadUInt32();
                                continue;
                        }
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237970109966541168UL) { goto FAIL; }

                        ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_JoinRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_JoinRoomMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_JoinRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Protocols.S2C_JoinRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_JoinRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_KickRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_KickRoomMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_KickRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Protocols.S2C_KickRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_KickRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_PushRoomMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_PushRoomMsg>
    {
        // room
        private static global::System.ReadOnlySpan<byte> GetSpan_room() => new byte[1 + 4] { 164, 114, 111, 111, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_PushRoomMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_room());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomInfo>(formatterResolver).Serialize(ref writer, value.room, options);
        }

        public global::Queen.Protocols.S2C_PushRoomMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_PushRoomMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1836019570UL) { goto FAIL; }

                        ____result.room = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomInfo>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_PushRoomsMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_PushRoomsMsg>
    {
        // rooms
        private static global::System.ReadOnlySpan<byte> GetSpan_rooms() => new byte[1 + 5] { 165, 114, 111, 111, 109, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_PushRoomsMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_rooms());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomInfo[]>(formatterResolver).Serialize(ref writer, value.rooms, options);
        }

        public global::Queen.Protocols.S2C_PushRoomsMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_PushRoomsMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495757258610UL) { goto FAIL; }

                        ____result.rooms = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.RoomInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2C_Room2GameMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2C_Room2GameMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2C_Room2GameMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Protocols.S2C_Room2GameMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2C_Room2GameMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2CLoginMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2CLoginMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2CLoginMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
        }

        public global::Queen.Protocols.S2CLoginMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2CLoginMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2CLogoutMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2CLogoutMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2CLogoutMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
        }

        public global::Queen.Protocols.S2CLogoutMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2CLogoutMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2CRegisterMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2CRegisterMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2CRegisterMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Protocols.S2CRegisterMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2CRegisterMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2G_CreateStageMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.S2G_CreateStageMsg>
    {
        // id
        private static global::System.ReadOnlySpan<byte> GetSpan_id() => new byte[1 + 2] { 162, 105, 100 };
        // name
        private static global::System.ReadOnlySpan<byte> GetSpan_name() => new byte[1 + 4] { 164, 110, 97, 109, 101 };
        // seats
        private static global::System.ReadOnlySpan<byte> GetSpan_seats() => new byte[1 + 5] { 165, 115, 101, 97, 116, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.S2G_CreateStageMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_id());
            writer.Write(value.id);
            writer.WriteRaw(GetSpan_name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.name, options);
            writer.WriteRaw(GetSpan_seats());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInfo[]>(formatterResolver).Serialize(ref writer, value.seats, options);
        }

        public global::Queen.Protocols.S2G_CreateStageMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.S2G_CreateStageMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25705UL) { goto FAIL; }

                        ____result.id = reader.ReadUInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667182UL) { goto FAIL; }

                        ____result.name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 495873779059UL) { goto FAIL; }

                        ____result.seats = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Queen.Protocols.SeatInfo[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SeatInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.SeatInfo>
    {
        // seat
        private static global::System.ReadOnlySpan<byte> GetSpan_seat() => new byte[1 + 4] { 164, 115, 101, 97, 116 };
        // pid
        private static global::System.ReadOnlySpan<byte> GetSpan_pid() => new byte[1 + 3] { 163, 112, 105, 100 };
        // nickname
        private static global::System.ReadOnlySpan<byte> GetSpan_nickname() => new byte[1 + 8] { 168, 110, 105, 99, 107, 110, 97, 109, 101 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.SeatInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_seat());
            writer.Write(value.seat);
            writer.WriteRaw(GetSpan_pid());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.pid, options);
            writer.WriteRaw(GetSpan_nickname());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.nickname, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Protocols.SeatInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.SeatInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1952540019UL) { goto FAIL; }

                        ____result.seat = reader.ReadUInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6580592UL) { goto FAIL; }

                        ____result.pid = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897168157038UL:
                                ____result.nickname = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541168UL:
                                ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SeatInputInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.SeatInputInfo>
    {
        // seat
        private static global::System.ReadOnlySpan<byte> GetSpan_seat() => new byte[1 + 4] { 164, 115, 101, 97, 116 };
        // moveX
        private static global::System.ReadOnlySpan<byte> GetSpan_moveX() => new byte[1 + 5] { 165, 109, 111, 118, 101, 88 };
        // moveY
        private static global::System.ReadOnlySpan<byte> GetSpan_moveY() => new byte[1 + 5] { 165, 109, 111, 118, 101, 89 };
        // jump
        private static global::System.ReadOnlySpan<byte> GetSpan_jump() => new byte[1 + 4] { 164, 106, 117, 109, 112 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.SeatInputInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_seat());
            writer.Write(value.seat);
            writer.WriteRaw(GetSpan_moveX());
            writer.Write(value.moveX);
            writer.WriteRaw(GetSpan_moveY());
            writer.Write(value.moveY);
            writer.WriteRaw(GetSpan_jump());
            writer.Write(value.jump);
        }

        public global::Queen.Protocols.SeatInputInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.SeatInputInfo();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1952540019UL:
                                ____result.seat = reader.ReadUInt32();
                                continue;
                            case 1886221674UL:
                                ____result.jump = reader.ReadBoolean();
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 379659382637UL:
                                ____result.moveX = reader.ReadInt32();
                                continue;
                            case 383954349933UL:
                                ____result.moveY = reader.ReadInt32();
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Queen.Protocols.Common
{
    public sealed class NodeConnectMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.Common.NodeConnectMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.Common.NodeConnectMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.Common.NodeConnectMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.Common.NodeConnectMsg();
            return ____result;
        }
    }

    public sealed class NodeDisconnectMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.Common.NodeDisconnectMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.Common.NodeDisconnectMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.Common.NodeDisconnectMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.Common.NodeDisconnectMsg();
            return ____result;
        }
    }

    public sealed class NodePingMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.Common.NodePingMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.Common.NodePingMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.Common.NodePingMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.Common.NodePingMsg();
            return ____result;
        }
    }

    public sealed class NodeReceiveMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.Common.NodeReceiveMsg>
    {
        // data
        private static global::System.ReadOnlySpan<byte> GetSpan_data() => new byte[1 + 4] { 164, 100, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.Common.NodeReceiveMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_data());
            writer.Write(value.data);
        }

        public global::Queen.Protocols.Common.NodeReceiveMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Protocols.Common.NodeReceiveMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1635017060UL) { goto FAIL; }

                        ____result.data = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NodeTimeoutMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Protocols.Common.NodeTimeoutMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Protocols.Common.NodeTimeoutMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Protocols.Common.NodeTimeoutMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Protocols.Common.NodeTimeoutMsg();
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

