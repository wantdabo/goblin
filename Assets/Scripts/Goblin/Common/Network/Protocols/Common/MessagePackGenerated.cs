// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(9)
            {
                { typeof(global::Queen.Network.Protocols.C2SLoginMsg), 0 },
                { typeof(global::Queen.Network.Protocols.C2SRegisterMsg), 1 },
                { typeof(global::Queen.Network.Protocols.Common.NodeConnectMsg), 2 },
                { typeof(global::Queen.Network.Protocols.Common.NodeDisconnectMsg), 3 },
                { typeof(global::Queen.Network.Protocols.Common.NodePingMsg), 4 },
                { typeof(global::Queen.Network.Protocols.Common.NodeReceiveMsg), 5 },
                { typeof(global::Queen.Network.Protocols.Common.NodeTimeoutMsg), 6 },
                { typeof(global::Queen.Network.Protocols.S2CLoginMsg), 7 },
                { typeof(global::Queen.Network.Protocols.S2CRegisterMsg), 8 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Queen.Network.Protocols.C2SLoginMsgFormatter();
                case 1: return new MessagePack.Formatters.Queen.Network.Protocols.C2SRegisterMsgFormatter();
                case 2: return new MessagePack.Formatters.Queen.Network.Protocols.Common.NodeConnectMsgFormatter();
                case 3: return new MessagePack.Formatters.Queen.Network.Protocols.Common.NodeDisconnectMsgFormatter();
                case 4: return new MessagePack.Formatters.Queen.Network.Protocols.Common.NodePingMsgFormatter();
                case 5: return new MessagePack.Formatters.Queen.Network.Protocols.Common.NodeReceiveMsgFormatter();
                case 6: return new MessagePack.Formatters.Queen.Network.Protocols.Common.NodeTimeoutMsgFormatter();
                case 7: return new MessagePack.Formatters.Queen.Network.Protocols.S2CLoginMsgFormatter();
                case 8: return new MessagePack.Formatters.Queen.Network.Protocols.S2CRegisterMsgFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Queen.Network.Protocols
{
    public sealed class C2SLoginMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.C2SLoginMsg>
    {
        // username
        private static global::System.ReadOnlySpan<byte> GetSpan_username() => new byte[1 + 8] { 168, 117, 115, 101, 114, 110, 97, 109, 101 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.C2SLoginMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.username, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Network.Protocols.C2SLoginMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Network.Protocols.C2SLoginMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731189UL:
                                ____result.username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541168UL:
                                ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class C2SRegisterMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.C2SRegisterMsg>
    {
        // username
        private static global::System.ReadOnlySpan<byte> GetSpan_username() => new byte[1 + 8] { 168, 117, 115, 101, 114, 110, 97, 109, 101 };
        // password
        private static global::System.ReadOnlySpan<byte> GetSpan_password() => new byte[1 + 8] { 168, 112, 97, 115, 115, 119, 111, 114, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.C2SRegisterMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.username, options);
            writer.WriteRaw(GetSpan_password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.password, options);
        }

        public global::Queen.Network.Protocols.C2SRegisterMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Network.Protocols.C2SRegisterMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731189UL:
                                ____result.username = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541168UL:
                                ____result.password = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2CLoginMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.S2CLoginMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.S2CLoginMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Network.Protocols.S2CLoginMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Network.Protocols.S2CLoginMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class S2CRegisterMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.S2CRegisterMsg>
    {
        // code
        private static global::System.ReadOnlySpan<byte> GetSpan_code() => new byte[1 + 4] { 164, 99, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.S2CRegisterMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_code());
            writer.Write(value.code);
        }

        public global::Queen.Network.Protocols.S2CRegisterMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Network.Protocols.S2CRegisterMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701080931UL) { goto FAIL; }

                        ____result.code = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Queen.Network.Protocols.Common
{
    public sealed class NodeConnectMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.Common.NodeConnectMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.Common.NodeConnectMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Network.Protocols.Common.NodeConnectMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Network.Protocols.Common.NodeConnectMsg();
            return ____result;
        }
    }

    public sealed class NodeDisconnectMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.Common.NodeDisconnectMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.Common.NodeDisconnectMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Network.Protocols.Common.NodeDisconnectMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Network.Protocols.Common.NodeDisconnectMsg();
            return ____result;
        }
    }

    public sealed class NodePingMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.Common.NodePingMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.Common.NodePingMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Network.Protocols.Common.NodePingMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Network.Protocols.Common.NodePingMsg();
            return ____result;
        }
    }

    public sealed class NodeReceiveMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.Common.NodeReceiveMsg>
    {
        // data
        private static global::System.ReadOnlySpan<byte> GetSpan_data() => new byte[1 + 4] { 164, 100, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.Common.NodeReceiveMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_data());
            writer.Write(value.data);
        }

        public global::Queen.Network.Protocols.Common.NodeReceiveMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Queen.Network.Protocols.Common.NodeReceiveMsg();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1635017060UL) { goto FAIL; }

                        ____result.data = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class NodeTimeoutMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Queen.Network.Protocols.Common.NodeTimeoutMsg>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Queen.Network.Protocols.Common.NodeTimeoutMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(0);
        }

        public global::Queen.Network.Protocols.Common.NodeTimeoutMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            var ____result = new global::Queen.Network.Protocols.Common.NodeTimeoutMsg();
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

